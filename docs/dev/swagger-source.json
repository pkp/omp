{
	"swagger": "2.0",
	"info": {
		"version": "3.2.x",
		"title": "Open Monograph Press - API Reference",
		"description": "This guide documents the REST API endpoints which can be accessed with this version of [Open Monograph Press](https://pkp.sfu.ca/omp/). It is a technical reference for software developers who wish to build custom interactions with the platform.\n\nPlease consult the [REST API Usage Guide](/dev/api) for an introduction to using the API or the [Developer Documentation Hub](/dev) for documentation on the platform's internals.",
		"contact": {
			"name": "Public Knowledge Project",
			"url": "https://pkp.sfu.ca"
		}
	},
	"produces": [
		"application/json"
	],
	"tags": [
		{
			"name": "Users",
			"description": "Only admins, editors, and subeditors can access these endpoints."
		},
		{
			"name": "Contexts",
			"description": "Only admins and press managers can access these endpoints."
		},
		{
			"name": "Email Templates",
			"description": "Only admins and journal managers can access these endpoints."
		},
		{
			"name": "Mailables",
			"description": "Only admins and journal managers can access these endpoints."
		},
		{
			"name": "Temporary Files",
			"description": "A special endpoint to be used for handling file uploads. See the [API Usage Guide](/dev/api) for more information."
		},
		{
			"name": "Backend",
			"description": "Private endpoints for OJS's UI. These endpoints will be less stable between versions. We discourage their use in third-party plugins or applications."
		}
	],
	"definitions": {
		"Author": "author",
		"Context": "context",
		"EmailTemplate": "emailTemplate",
		"ErrorResponse": {
			"type": "object",
			"description": "A response object that will be returned when the request could not be fulfilled.",
			"properties": {
				"error": {
					"type": "string"
				},
				"errorMessage": {
					"type": "string"
				}
			}
		},
		"Galley": "galley",
		"InvalidParametersResponse": {
			"type": "object",
			"description": "A response object that will be returned when there are validation errors for the request parameters. Typically used with forms.",
			"example": {
				"name": [
					"You must provide a name to create a new user."
				],
				"roles": [
					"You must assign the user to one or more roles."
				]
			}
		},
		"LocaleObject": {
			"type": "object",
			"description": "Key/value pairs containing data stored by locale key.",
			"example": {
				"en_US": "Filename",
				"fr_CA": "Nom de fichier"
			}
		},
		"ReviewRound": "reviewRound",
		"ReviewerSummary": {
			"type": "object",
			"description": "A special representation of a User assigned to a reviewer group. This model presents specific details about review activity.",
			"properties": {
				"_href": {
					"type": "string"
				},
				"affiliation": {
					"$ref": "#/definitions/LocaleObject"
				},
				"averageReviewCompletionDays": {
					"type": "integer"
				},
				"dateLastReviewAssignment": {
					"type": "string"
				},
				"disabled": {
					"type": "boolean"
				},
				"fullName": {
					"type": "string"
				},
				"gossip": {
					"$ref": "#/definitions/LocaleObject"
				},
				"groups": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/UserGroup"
					}
				},
				"id": {
					"type": "integer"
				},
				"interests": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/UserInterest"
					}
				},
				"reviewsActive": {
					"type": "integer"
				},
				"reviewsCompleted": {
					"type": "integer"
				},
				"reviewsCancelled": {
					"type": "integer"
				},
				"reviewsDeclined": {
					"type": "integer"
				},
				"userName": {
					"type": "string"
				}
			}
		},
		"Submission": "submission",
		"SubmissionFile": "submissionFile",
		"ThemeOptions": {
			"type": "object",
			"description": "A theme with values for any of its theme options. The theme is provided in the `themePluginPath` key. Other keys may or may not exist depending on what options have been defined by that theme.",
			"properties": {
				"themePluginPath": {
					"type": "string"
				},
				"...": {
					"type": "string"
				}
			}
		},
		"User": "user",
		"UserGroup": "userGroup",
		"UserInterest": {
			"type": "object",
			"description": "A user's review interests.",
			"properties": {
				"id": {
					"type": "integer"
				},
				"interest": {
					"type": "string"
				}
			}
		}
	},
	"paths": {
		"/users": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Get a list of users.",
				"parameters": [
					{
						"name": "roleIds",
						"description": "Filter the results by those who have one of these user role IDs.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "status",
						"description": "Filter results by active/disabled users. Must be one of `active`, `disabled`, `all`. Default is `active`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "assignedToSubmission",
						"description": "Filter results by those assigned to this submission ID.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "assignedToSubmissionStage",
						"description": "Filter results by those assigned to this submission stage. Will be ignored if no `assignedToSubmission` parameter exists.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "count",
						"description": "How many results to return in a single request. Default is `20`. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "offset",
						"description": "Offset the results returned. Use this to receive subsequent pages of requests. A `count` of `10` and `offset` of `15` will return results `15` to `25`.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "orderBy",
						"description": "Order the results returned. Must be one of `id`, `familyName` or `givenName`. Default is `id`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "orderDirection",
						"description": "Return the results in ascending or descending order. Must be `ASC` or `DESC`. Default is `DESC`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "searchPhrase",
						"description": "Filter the results by a search phrase matched against the `userName`, `givenName`, `familyName`, `email`, `affiliation`, `biography` and `orcid`.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "A list of users.",
						"schema": {
							"type": "object",
							"properties": {
								"itemsMax": {
									"type": "integer"
								},
								"items": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/UserSummary"
									}
								}
							}
						}
					},
					"403": {
						"description": "Only administrators, press managers and editors are allowed to access users on this site.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/users/{userId}": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Get a user by ID.",
				"parameters": [
					{
						"name": "userId",
						"description": "User ID",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "User details.",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				}
			}
		},
		"/users/reviewers": {
			"get": {
				"tags": [
					"Users"
				],
				"parameters": [
					{
						"name": "status",
						"description": "Filter results by active/disabled users. Must be one of `active`, `disabled`, `all`. Default is `active`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "reviewerRating",
						"description": "Filter results by those who have an average review assignment rating of at least `X` (valid ratings are between `1` and `5`).",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "reviewsCompleted",
						"description": "Filter results by those who have completed at least `X` reviews. You can also pass a range as a string formatted as `X-X`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "reviewsActive",
						"description": "Filter results by those who have `X` review assignments currently in progress. You can also pass a range as a string formatted as `X-X`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "daysSinceLastAssignment",
						"description": "Filter results by those who's last review was assigned at least `X` days ago. You can also pass a range as a string formatted as `X-X`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "averageCompletion",
						"description": "Filter results by those who complete a review assignment within `X` days on average.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "assignedToSubmission",
						"description": "Filter results by those assigned to this submission ID.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "assignedToSubmissionStage",
						"description": "Filter results by those assigned to this submission stage. Will be ignored if no `assignedToSubmission` parameter exists.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "count",
						"description": "How many results to return in a single request. Default is `20`. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "offset",
						"description": "Offset the results returned. Use this to receive subsequent pages of requests. A `count` of `10` and `offset` of `15` will return results `15` to `25`.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "orderBy",
						"description": "Order the results returned. Must be one of `id`, `familyName` or `givenName`. Default is `id`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "orderDirection",
						"description": "Return the results in ascending or descending order. Must be `ASC` or `DESC`. Default is `DESC`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "searchPhrase",
						"description": "Filter the results by a search phrase matched against the `userName`, `givenName`, `familyName`, `email`, `affiliation`, `biography`, `orcid`, `interests`, and `gossip`.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "List of reviewers.",
						"schema": {
							"type": "object",
							"properties": {
								"itemsMax": {
									"type": "integer"
								},
								"items": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/ReviewerSummary"
									}
								}
							}
						}
					},
					"403": {
						"description": "Only administrators, press managers and editors are allowed to access users on this site.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/contexts": {
			"get": {
				"tags": [
					"Contexts"
				],
				"summary": "Get a list of presses.",
				"parameters": [
					{
						"name": "isEnabled",
						"description": "Filter results by enabled/disabled contexts. Any truthy or falsey value will get enabled/disabled contexts. Leave this parameter out to get all contexts.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "count",
						"description": "How many results to return in a single request. Default is `20`. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "type"
					},
					{
						"name": "offset",
						"description": "Offset the results returned. Use this to receive subsequent pages of requests.",
						"in": "query",
						"required": false,
						"type": "integer"
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by a search phrase matched against the `name`, `description`, `acronym`, or `abbreviation`.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses":  {
					"200": {
						"description": "List of contexts.",
						"schema": {
							"type": "object",
							"properties": {
								"itemsMax": {
									"type": "integer"
								},
								"items": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/ContextSummary"
									}
								}
							}
						}
					},
					"403": {
						"description": "You do not have permission to view disabled contexts.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"post":  {
				"tags": [
					"Contexts"
				],
				"summary": "Create a new context (journal/press).",
				"parameters": [
					{
						"description": "Details about the context that should be created. The `path` field is required. The `name` is required in the site's primary locale.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/ContextEditable"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Details of the context that was just added.",
						"schema": {
							"$ref": "#/definitions/Context"
						}
					},
					"400": {
						"description": "The information you submitted did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					}
				}
			}
		},
		"/contexts/{contextId}": {
			"get": {
				"tags": [
					"Contexts"
				],
				"summary": "Get a context by ID.",
				"parameters": [
					{
						"name": "contextId",
						"description": "Context ID",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "Context details. Some details may be withheld if you are not a site admin or manager of that context.",
						"schema": {
							"$ref": "#/definitions/Context"
						}
					},
					"403": {
						"description": "You do not have permission to view this context.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"description": "The requested context could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Contexts"
				],
				"summary": "Edit a context (journal/press).",
				"parameters": [
					{
						"name": "contextId",
						"description": "Context ID",
						"in": "path",
						"required": true,
						"type": "integer"
					},
					{
						"description": "The details about a context that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/ContextEditable"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The context that was just edited with the current values after the edit has occurred.",
						"schema": {
							"$ref": "#/definitions/Context"
						}
					},
					"400": {
						"description": "The information you submitted did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"description": "There are two possible conditions that will result in a `403` response. 1. You do not have permission to edit this context. 2. You submitted changes for one context from the API endpoint of another context. To edit a context, you must make a request to that context's API endpoint or the site-wide API endpoint.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"description": "The requested context could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Contexts"
				],
				"summary": "Delete a context (journal/press).",
				"parameters": [
					{
						"name": "contextId",
						"description": "Context ID",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "Details of the context that was just deleted.",
						"schema": {
							"$ref": "#/definitions/Context"
						}
					},
					"403": {
						"description": "You do not have permission to delete this context.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"description": "The requested context could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/contexts/{contextId}/theme": {
			"get": {
				"tags": [
					"Contexts"
				],
				"summary": "Get a context's active theme and any theme options defined by it.",
				"parameters": [
					{
						"name": "contextId",
						"description": "Context ID",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "The response will include the theme plugin directory in `themePluginPath`. Any theme options will be provided in additional keys based on the option name.",
						"schema": {
							"$ref": "#/definitions/ThemeOptions"
						}
					},
					"403": {
						"description": "You do not have permission to view this context.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"description": "The requested context could not be found. A 404 may also be returned when a context has no active theme, or the active theme plugin has not been installed or enabled.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Contexts"
				],
				"summary": "Edit a context's (journal/press) active theme and options defined by that theme.",
				"parameters": [
					{
						"name": "contextId",
						"description": "Context ID",
						"in": "path",
						"required": true,
						"type": "integer"
					},
					{
						"description": "The details you want to edit. The `themePluginPath` is required to specify the active theme, even if the theme is not being changed. Any additional keys/values must match the options defined by that theme.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/ThemeOptions"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The new theme and values for any of its theme options.",
						"schema": {
							"$ref": "#/definitions/ThemeOptions"
						}
					},
					"400": {
						"description": "The information you submitted did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"description": "There are two possible conditions that will result in a `403` response. 1. You do not have permission to edit this context. 2. You submitted changes for one context from the API endpoint of another context. To edit a context, you must make a request to that context's API endpoint or the site-wide API endpoint.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"description": "The requested context could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/emailTemplates": {
			"get": {
				"tags": [
					"Email Templates"
				],
				"summary": "Get a list of email templates.",
				"parameters": [
					{
						"name": "isEnabled",
						"description": "Filter results by enabled/disabled email templates. Any truthy or falsey value will get enabled/disabled email templates.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "isCustom",
						"description": "Filter results by those with or without a default template. A truthy value will return only templates with a key that does not match one of the default templates. A falsey value will return only templates with a key that matches on of the default templates. Note that a default template may be customized, but this does not qualify for `isCustom`. Only completely custom templates, not a modified default template, will be returned when `isCustom` is `true`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "fromRoleIds",
						"description": "Filter results by email templates sent by one or more role IDs. Separate role IDs with a comma.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "toRoleIds",
						"description": "Filter results by email templates received by one or more role IDs. Separate role IDs with a comma.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "searchPhrase",
						"description": "Filter results by a search phrase matched against the `key`, `subject`, `body`, or `description`.",
						"in": "query",
						"required": false,
						"type": "string"
					},
					{
						"name": "count",
						"description": "How many results to return in a single request. Default is `30`. Max is `100`.",
						"in": "query",
						"required": false,
						"type": "type"
					},
					{
						"name": "offset",
						"description": "Offset the results returned. Use this to receive subsequent pages of requests.",
						"in": "query",
						"required": false,
						"type": "integer"
					}
				],
				"responses":  {
					"200": {
						"description": "List of email templates.",
						"schema": {
							"type": "object",
							"properties": {
								"itemsMax": {
									"type": "integer"
								},
								"items": {
									"type": "array",
									"items": {
										"$ref": "#/definitions/EmailTemplateSummary"
									}
								}
							}
						}
					},
					"403": {
						"description": "You do not have permission to view email templates.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"post":  {
				"tags": [
					"Email Templates"
				],
				"summary": "Create a new email template.",
				"parameters": [
					{
						"description": "Details about the email template that should be created.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/EmailTemplateEditable"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Details of the email template that was just added.",
						"schema": {
							"$ref": "#/definitions/EmailTemplate"
						}
					},
					"400": {
						"description": "The information you submitted did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					}
				}
			}
		},
		"/emailTemplates/{key}": {
			"get": {
				"tags": [
					"Email Templates"
				],
				"summary": "Get an email template by they the email key.",
				"parameters": [
					{
						"name": "key",
						"description": "Email template key",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "Email template details.",
						"schema": {
							"$ref": "#/definitions/EmailTemplate"
						}
					},
					"403": {
						"description": "You do not have permission to view email templates.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"description": "The requested email template could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Email Templates"
				],
				"summary": "Edit an email template.",
				"parameters": [
					{
						"name": "key",
						"description": "Email template key",
						"in": "path",
						"required": true,
						"type": "integer"
					},
					{
						"description": "The details about the email template that you want to edit. All params are optional. When a param is omitted, the existing value of that param will not be modified.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/EmailTemplateEditable"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The email template that was just edited with the current values after the edit has occurred.",
						"schema": {
							"$ref": "#/definitions/EmailTemplate"
						}
					},
					"400": {
						"description": "The information you submitted did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"description": "There are two possible conditions that will result in a `403` response. 1. You do not have permission to edit this email template. 2. You are an admin and you submitted changes for an email template in one context from the API endpoint of another context. To edit an email template, you must make a request to the API endpoint of that email template's context.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"description": "The requested email template could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Email Templates"
				],
				"summary": "Delete an email template.",
				"parameters": [
					{
						"name": "key",
						"description": "Email template key",
						"in": "path",
						"required": true,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "Details of the email template that was just deleted.",
						"schema": {
							"$ref": "#/definitions/EmailTemplate"
						}
					},
					"403": {
						"description": "You do not have permission to delete this email template.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"description": "The requested email template could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			},
			"/emailTemplates/restoreDefaults": {
				"delete": {
					"tags": [
						"Email Templates"
					],
					"summary": "Delete custom templates and reset all templates to their default settings.",
					"responses": {
						"200": {
							"description": "A list of template keys which were deleted or reset.",
							"schema": {
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		"/mailables": {
			"get": {
				"tags": [
					"Mailables"
				],
				"summary": "Get all mailables",
				"description": "Get a list of all Mailable classes configured in the journal. Each mailable class represents an email event, such as a notification to a reviewer.",
				"parameters": [
					{
						"name": "searchPhrase",
						"description": "Filter results by a search phrase matched against the `name` and `description` of a Mailable.",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "List of fully qualified class names of mailables.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view mailables.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/mailables/{id}": {
			"get": {
				"tags": [
					"Mailables"
				],
				"summary": "Get a mailable",
				"description": "Get a Mailable by its id.",
				"parameters": [
					{
						"name": "id",
						"description": "The ID of the mailable derived from the fully-qualified class name, such as `PKP-mail-mailables-ReviewRequest`.",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The mailable's fully qualified class name",
						"schema": {
							"type": "string"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to view mailables.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested mailable could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/mailables/{id}/emailTemplates": {
			"put": {
				"tags": [
					"Mailables"
				],
				"summary": "Assign email templates",
				"description": "Assign custom email templates to a `Mailable` class.",
				"parameters": [
					{
						"name": "id",
						"description": "The ID of the mailable derived from the fully-qualified class name, such as `PKP-mail-mailables-ReviewRequest`.",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "templateKeys",
						"description": "The `key`s of custom email templates.",
						"in": "body",
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"x-summary": "Success",
						"description": "The list of assigned custom email templates.",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					"400": {
						"x-summary": "Request Invalid",
						"description": "No email template keys were sent with the request.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					},
					"403": {
						"x-summary": "Request Unauthorized",
						"description": "You do not have permission to assign email templates to mailables.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					},
					"404": {
						"x-summary": "Request Not Found",
						"description": "The requested mailable or email template(s) could not be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/temporaryFiles": {
			"options": {
				"tags": [
					"Temporary Files"
				],
				"summary": "Responds with the appopriate headers to indicate file uploads maybe be sent, required by some file upload utilities which send a preflight request.",
				"responses": {
					"200": {
						"description": "An empty response body."
					}
				}
			},
			"post": {
				"tags": [
					"Temporary Files"
				],
				"summary": "Upload a file to the temporary file storage area and receive a temporary file ID.",
				"parameters": [
					{
						"name": "...",
						"description": "Use any parameter key to upload your file. The API endpoint will retrieve the first uploaded file.",
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The temporary file ID to use in other API requests.",
						"schema": {
							"type": "object",
							"properties": {
								"id": {
									"type": "integer"
								}
							}
						}
					},
					"400": {
						"description": "No uploaded file could be found.",
						"schema": {
							"$ref": "#/definitions/ErrorResponse"
						}
					}
				}
			}
		},
		"/_payments": {
			"put": {
				"tags": [
					"Backend"
				],
				"summary": "Used to save payment settings.",
				"description": "This endpoint is used on the settings page to save payment plugin settings alongside the general press settings for enabling payments and setting the currency.",
				"parameters": [
					{
						"description": "None of these properties are required. In addition to `paymentsEnabled` and `currency`, you may pass any property that corresponds with a setting for an enabled `paymethod` plugin.",
						"in": "body",
						"schema": {
							"type": "object",
							"properties": {
								"paymentsEnabled": {
									"type": "boolean"
								},
								"paymentPluginName": {
									"type": "string"
								},
								"currency": {
									"type": "string"
								},
								"...": {
									"type": "string"
								}
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "The parameters you submitted"
					},
					"400": {
						"description": "The information you submitted did not pass validation. The response will contain information about which parameters failed validation.",
						"schema": {
							"$ref": "#/definitions/InvalidParametersResponse"
						}
					}
				}
			}
		},
		"/_submissions": {
			"get": {
				"tags": [
					"Backend"
				],
				"summary": "Used in submission lists.",
				"description": "This endpoint delivers a little bit of extra information about each submission that is used in the submissions list. This private endpoint saves a few extra HTTP requests, but it is more database-intensive for each query.",
				"parameters": [
					{
						"description": "Accepts most parameters supported by the public `/submissions` endpoint."
					}
				],
				"responses": {
					"200": {
						"description": "List of submissions."
					}
				}
			}
		}
	}
}
